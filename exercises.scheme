#lang racket/base

; Exercise 1.3.  Define a procedure that takes three numbers as arguments and returns the sum of the squares of the two larger numbers.  

; (provide sum-of-squares-of-two-larger)
; 
; (define (sum-of-squares-of-two-larger-old a b c)
;   (cond
;     ((and (>= a b) (>= b c)) (+ (* a a) (* b b)))
;     ((and (>= a b) (>= c b)) (+ (* a a) (* c c)))
;     ((and (>= b a) (>= c a)) (+ (* b b) (* c c)))
;     ))
; 
; (define (sum-of-squares x1 x2)
;   (+ (* x1 x1)
;      (* x2 x2)))
; 
; (define (sum-square-either x1 x2 x3)
;   (cond
;     ((> x2 x3)
;      (sum-of-squares x1 x2))
;     (else (sum-of-squares x1 x3))))
; 
; (define (sum-of-squares-of-two-larger x1 x2 x3)
;   (cond
;     ((or (> x1 x2)
;          (> x1 x3))
;      (sum-square-either x1 x2 x3))
;     (else (sum-of-squares x2 x3))))
; 
; 
; (= (sum-of-squares-of-two-larger 2 2 3) 13)
; 
; (provide fast-expt)
; 
; (define (expt-r b n)
;   (if (= n 0)
;       1
;       (* b (expt b (- n 1)))))
; 
; (define (expt b n)
;   (expt-iter b n 1))
; 
; (define (expt-iter b counter product)
;   (if (= counter 0)
;       product
;       (expt-iter b
;                  (- counter 1)
;                  (* b product)))) 
; 
; (define (square x) (* x x))
; 
; (define (fast-expt-r b n)
;   (cond ((= n 0) 1)
;         ((even? n) (square (fast-expt b (/ n 2))))
;         (else (* b (fast-expt b (- n 1))))))
; 
; (define (even? n)
;   (= (remainder n 2) 0))
; 
; 
; 
;  ; Exercise 1.16.  Design a procedure that evolves an iterative exponentiation process that uses successive squaring and uses a logarithmic number of steps, as does fast-expt.
; ; (Hint: Using the observation that (b^n/2)^2 = (b^2)^n/2, keep, along with the exponent n and the base b, an additional state variable a, and define the state transformation in such a way that the product a.b^n is unchanged from state to state. At the beginning of the process a is taken to be 1, and the answer is given by the value of a at the end of the process.
; ; In general, the technique of defining an invariant quantity that remains unchanged from state to state is a powerful way to think about the design of iterative algorithms.) 
; 
; (define (fast-expt b n) (fast-expt-iter b n))
; 
; (define (fast-expt-iter b n)
;   (define (iterator accum current-n)
;     (cond
;       (= current-n n) (accum)
; 
;       (< (/ n 2) current-n) (iterator b (square accum) (* 2 current-n) n)
; 
;       (else (iterator b (* b accum) (- current-n 1) n))))
; 
;   (iterator 1 0))
; 
; 
; 
; (define (factorial n)
;   (if (= n 1) 1
;       (* n (factorial (- n 1)))))
; 
; 
;  (define (fact-iter product counter max-count)
;   (if (> counter max-count)
;       product
;       (fact-iter (* counter product)
;                  (+ counter 1)
;                  max-count)))
; 
; ; (define (factorial n) (fact-iter 1 1 n))
; 
; 
; ; Exercise 1.6.  Alyssa P. Hacker doesn't see why (if) needs to be provided as a special form. ``Why can't I just define it as an ordinary procedure in terms of cond?'' she asks. Alyssa's friend Eva Lu Ator claims this can indeed be done, and she defines a new version of if:
; 
; 
; 
; (define (count-change amount)
;   (map display (list "counting change for: " amount "\n"))
;   (cc amount 3))
; (define (cc amount kinds-of-coins)
;   (map display (list "amount: " amount " kinds of coins: " kinds-of-coins "\n"))
;   (cond ((= amount 0) 1)
;         ((or (< amount 0) (= kinds-of-coins 0)) 0)
;         (else (+ (cc amount
;                      (- kinds-of-coins 1))
;                  (cc (- amount
;                         (first-denomination kinds-of-coins))
;                      kinds-of-coins)))))
; (define (first-denomination kinds-of-coins)
;   (cond ((= kinds-of-coins 1) 1)
;         ((= kinds-of-coins 2) 2)
;         ((= kinds-of-coins 3) 5)
;         ((= kinds-of-coins 4) 10)
;         ((= kinds-of-coins 5) 50)))
; 
; (count-change 9)


(define (inc x) (+ x 1))

(define
  (double f)
  (display "creating double of ")
  (display f)
  (newline)
  (define (doubledf x)
    (display "applying double of ")
    (display f)
    (display x)
    (newline)
    (f (f x)))
  doubledf)

(define add2 (double inc))

(= (add2 3) 5)
; (display ((double inc) 3))
;(display (((double (double double)) inc) 5))

(newline)
(display "double double: ")
(newline)
(double double)
(newline)

(display "double double double: ")
(newline)
(double (double double))
(newline)

(display "exerciseeeee")
(newline)
(display (((double (double double)) inc) 4))
;(display (((double (double (double double))) inc) 5))
;(= (((double (double double)) inc) 5) 13) 

;(define (doubledouble f) (lambda (f) (double (double f))))

